{"ast":null,"code":"var _jsxFileName = \"/Users/kangwang/Documents/GitHub/IntelliHealth/IntelliHealthApp/IntelliHealthReact/intellihealthfrontend/src/components/Physician.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './SelectionButton.css'; // Import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SelectionButton = () => {\n  _s();\n  const [isSelected, setIsSelected] = useState(false);\n  const handleClick = () => {\n    setIsSelected(!isSelected);\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handleClick,\n    className: `selection-button ${isSelected ? 'selected' : ''}`,\n    children: isSelected ? 'Selected' : 'Select'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n_s(SelectionButton, \"5DtxMhs0n+JsbGWNZftSFTxrVZQ=\");\n_c = SelectionButton;\nexport default SelectionButton;\n\n/*\n\n\n\nconst ASK_QUETIONS_URL = 'http://127.0.0.1:5000/api/v1/chat/'\nconst QUOTE_MODEL_URL = 'http://127.0.0.1:5000/api/v1/model/prediction'\nconst { TextArea } = Input;\nlet text1 = \"sea\";\nclass Physician extends Component {\n    constructor(props) {\n        super(props);\n        // define state for the components states\n        this.state = {\n            currentQuestion: null,\n            currentQuote: null,\n            currentAnswer: \"Your answer will be displayed here\",\n            gender: 0,\n            age: 80,\n            hypertension: 0,\n            heartdisease: 1,\n            smokingHistory: 4,\n            bmi: 25.19,\n            hbA1cLevel: 6.6,\n            bloodGlucoseLevel: 140,\n            currentPrediction: \"Your prediction will be displayed here\",\n        }\n        this.formRef = React.createRef();\n    }\n\n    onClickExample1 = async () => {\n        console.log(\"clicked example 1\");\n        await this.setState({ gender: 0 });\n        this.formRef.current.setFieldsValue({\n            gender: 0,\n        });\n        await this.setState({ age: 80 });\n        this.formRef.current.setFieldsValue({\n            age: 80,\n        });\n        await this.setState({ hypertension: 0 });\n        this.formRef.current.setFieldsValue({\n            hypertension: 0,\n        });\n        await this.setState({ heartdisease: 1 });\n        this.formRef.current.setFieldsValue({\n            heartdisease: 1,\n        });\n        await this.setState({ smokingHistory: 4 });\n        this.formRef.current.setFieldsValue({\n            smokingHistory: 4,\n        });\n        await this.setState({ bmi: 25.19 });\n        this.formRef.current.setFieldsValue({\n            bmi: 25.19,\n        });\n        await this.setState({ hbA1cLevel: 6.6 });\n        this.formRef.current.setFieldsValue({\n            hbA1cLevel: 6.6,\n        });\n        await this.setState({ bloodGlucoseLevel: 140 });\n        this.formRef.current.setFieldsValue({\n            bloodGlucoseLevel: 140,\n        });\n        console.log(\"Data set to example 1\");\n        // console.log(this.state.gender);\n    }\n\n    onClickExample2 = async () => {\n        console.log(\"clicked example 2\");\n        await this.setState({ gender: 1 });\n        this.formRef.current.setFieldsValue({\n            gender: 1,\n        });\n        await this.setState({ age: 90 });\n        this.formRef.current.setFieldsValue({\n            age: 90,\n        });\n        await this.setState({ hypertension: 1 });\n        this.formRef.current.setFieldsValue({\n            hypertension: 1,\n        });\n        await this.setState({ heartdisease: 1 });\n        this.formRef.current.setFieldsValue({\n            heartdisease: 1,\n        });\n        await this.setState({ smokingHistory: 12 });\n        this.formRef.current.setFieldsValue({\n            smokingHistory: 12,\n        });\n        await this.setState({ bmi: 40 });\n        this.formRef.current.setFieldsValue({\n            bmi: 40,\n        });\n        await this.setState({ hbA1cLevel: 10 });\n        this.formRef.current.setFieldsValue({\n            hbA1cLevel: 10,\n        });\n        await this.setState({ bloodGlucoseLevel: 260 });\n        this.formRef.current.setFieldsValue({\n            bloodGlucoseLevel: 260,\n        });\n        console.log(\"Data set to example 2\");\n        // console.log(this.state.gender);\n    }\n\n    onClickMale = async () => {\n        console.log(\"clicked example 1\");\n        await this.setState({ gender: 0 });\n        this.formRef.current.setFieldsValue({\n            gender: 0,\n        });\n    }\n\n    onClickFemale = async () => {\n        console.log(\"clicked example 1\");\n        await this.setState({ gender: 0 });\n        this.formRef.current.setFieldsValue({\n            gender: 1,\n        });\n    }\n\n    onClickQuetions = async () => {\n        console.log(\"clicked ask quetions\");\n\n        // const response = await this.onAskQuestions();\n        // // console.log(response);\n        // this.setState({ currentAnswer: response });\n        // console.log(this.state.currentAnswer);\n        // // console.log(this.state.currentAnswer.created)\n\n        await this.onAskQuestions();\n        console.log(this.state.currentAnswer);\n    }\n\n    onSetAnswers = async (response) => {\n        await this.setState({ currentAnswer : response });\n        console.log(this.state.currentAnswer);\n    }\n\n    onClickModels = async () => {\n        console.log(\"clicked quote models\");\n\n        const response = await this.onQuoteModels();\n        console.log(response);\n    }\n\n    onChangeQuestions = async (e) => {\n        await this.setState({ currentQuestion : e.target.value });\n        console.log(this.state.currentQuestion);\n    }\n\n    onChangeModels = async e => {\n        await this.setState({ currentQuote : e.target.value });\n        console.log(this.state.currentQuote);\n    }\n\n    onChangeGender = async (e) => {\n        await this.setState({ gender : e });\n        console.log(this.state.gender);\n    }\n\n    onChangeAge = async e => {\n        await this.setState({ age : e});\n        console.log(this.state.age);\n    }\n\n    onChangeHypertension = async e => {\n        await this.setState({ hypertension : e });\n        console.log(this.state.hypertension);\n    }\n\n    onChangeHeartdisease = async e => {\n        await this.setState({ heartdisease : e });\n        console.log(this.state.heartdisease);\n    }\n\n    onChangeSmokingHistory = async e => {\n        await this.setState({ smokingHistory : e });\n        console.log(this.state.smokingHistory);\n    }\n\n    onChangeBmi = async e => {\n        await this.setState({ bmi : e });\n        console.log(this.state.bmi);\n    }\n\n    onChangeHbA1cLevel = async e => {\n        await this.setState({ hbA1cLevel : e });\n        console.log(this.state.hbA1cLevel);\n    }\n\n    onChangeBloodGlucoseLevel = async e => {\n        await this.setState({ BloodGlucoseLevel : e });\n        console.log(this.state.BloodGlucoseLevel);\n    }\n\n    // onAskQuestions = async () => {\n    //     return fetch(`${ASK_QUETIONS_URL}${this.state.currentQuestion}`, {\n    //         method: 'GET',\n    //         headers: {\n    //         'Content-Type': 'application/json',\n    //         },\n    //     }).then((response) => {\n    //         if (response.status !== 200) {\n    //             throw Error('Fail to request the answer from the server');\n    //         }\n\n    //         return response.json(); // Return the promise directly\n    //     }).then((result) => {\n    //         console.log(result);\n    //         this.setState({ currentAnswer: result }); // Set the result when the promise resolves\n    //         // console.log(this.state.currentAnswer);\n    //         return result; // Return the result value\n    //     });\n    // }\n\n    onAskQuestions = () => {\n        axios.get(`${ASK_QUETIONS_URL}${this.state.currentQuestion}`, {\n            headers: {\n            'Content-Type': 'application/json',\n            },\n        }).then((response) => {\n            if (response.status !== 200) {\n                throw Error('Fail to request the answer from the server');\n            }\n\n            \n            console.log(response);\n            this.setState({ currentAnswer: response.data.text}); // Set the result when the promise resolves\n            // console.log(this.state.currentAnswer);\n            return response; // Return the result value\n        });\n    }\n\n    onClickPrediction = () => {\n        var data = [[this.state.gender, this.state.age, this.state.hypertension, this.state.heartdisease, this.state.smokingHistory, this.state.bmi, this.state.hbA1cLevel, this.state.bloodGlucoseLevel]]\n        var matrix = { 'data': data }\n        console.log(matrix);\n        console.log(JSON.stringify(matrix));\n        axios.post(`${QUOTE_MODEL_URL}`, {\n            headers: {\n            'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(matrix)\n        }).then((response) => {\n            if (response.status !== 200) {\n                throw Error('Fail to request the answer from the server');\n            }\n\n            \n            // console.log(response);\n            this.setState({ currentPrediction: response.data.prediction}); // Set the result when the promise resolves\n            console.log(this.state.currentPrediction+text1);\n            return response; // Return the result value\n        });\n    }\n\n    onQuoteModels = async (data) => {\n        return fetch(`${QUOTE_MODEL_URL}`, {\n            method: 'post',\n            headers: {\n            'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(data)\n        }).then((response) => {\n            if (response.status !== 200) {\n                throw Error('Fail to request the prediction from the server');\n            }\n\n            return response.json();\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"Main\" style={{fontWeight: \"bold\"}}>\n                <Tabs defaultActiveKey = \"prediction\">\n                    <Tabs.TabPane tab=\"Prediction\" key=\"prediction\">\n                        IntelliHealth Prediction\n                        <p style={{fontWeight: \"normal\", fontSize: \"15px\"}}>\n                            Please input the following information to get a prediction of your risk of getting diabetes.\n                        </p>\n\n                        <Form ref={this.formRef}>\n                            <Form.Item label=\"Gender\" name=\"gender\" initialValue={0} rules={[{ required: true, message: 'Please input valid numbers'}]}>\n                                <InputNumber min={0} max={1} onChange={this.onChangeGender} precision={0}/>\n                            </Form.Item>\n                            <Form.Item label = \"Gender\" name=\"gender\" rules={[{ required: true}]}>\n                            <Button  type=\"primary\" htmlType=\"submit\" onClick={this.onClickMale} style={{ margin: 20 }}> Male </Button>\n                            <Button  type=\"primary\" htmlType=\"submit\" onClick={this.onClickFemale} style={{ margin: 20 }}> Female </Button>\n                            </Form.Item>\n                            <Form.Item label=\"Age\" name=\"age\" initialValue={80} rules={[{ required: true, message: 'Please input valid numbers'}]}>\n                                <InputNumber min={0} max={100} onChange={this.onChangeAge} precision={0}/>\n                            </Form.Item>\n                            <Form.Item label=\"Hypertension\" name=\"hypertension\" initialValue={0} rules={[{ required: true, message: 'Please input valid numbers'}]}>\n                                <InputNumber min={0} max={1} onChange={this.onChangeHypertension} precision={0}/>\n                            </Form.Item>\n                            <Form.Item label=\"Heart Disease\" name=\"heartdisease\" initialValue={1} rules={[{ required: true, message: 'Please input valid numbers'}]}>\n                                <InputNumber min={0} max={1} onChange={this.onChangeHeartdisease} precision={0}/>\n                            </Form.Item>\n                            <Form.Item label=\"Smoking History\" name=\"smokingHistory\" initialValue={4} rules={[{ required: true, message: 'Please input valid numbers'}]}>\n                                <InputNumber min={0} max={100} onChange={this.onChangeSmokingHistory} precision={2}/>\n                            </Form.Item>\n                            <Form.Item label=\"BMI\" name=\"bmi\" initialValue={25.19} rules={[{ required: true, message: 'Please input valid numbers'}]}>\n                                <InputNumber min={0} max={100} onChange={this.onChangeBmi} precision={2}/>\n                            </Form.Item>\n                            <Form.Item label=\"HbA1c Level\" name=\"hbA1cLevel\" initialValue={6.6} rules={[{ required: true, message: 'Please input valid numbers'}]}>\n                                <InputNumber min={0} max={100} onChange={this.onChangeHbA1cLevel} precision={2}/>\n                            </Form.Item>\n                            <Form.Item label=\"Blood Glucose Level\" name=\"bloodGlucoseLevel\" initialValue={140} rules={[{ required: true, message: 'Please input valid numbers'}]}>\n                                <InputNumber min={0} max={600} onChange={this.onChangeBloodGlucoseLevel} precision={2}/>\n                            </Form.Item>\n\n                        </Form>\n\n                        <Button  type=\"primary\" htmlType=\"submit\" onClick={this.onClickExample1} style={{ margin: 20 }}> Example 1 </Button>\n\n                        <Button  type=\"primary\" htmlType=\"submit\" onClick={this.onClickExample2} style={{  margin: 20 }}> Example 2 </Button>\n\n                        <p></p>\n\n                        <Button  type=\"primary\" htmlType=\"submit\" onClick={this.onClickPrediction}> Get Prediction </Button>\n\n\n\n                <div>\n                    <Card title=\"Prediction: \" bordered={false} style={{ width: 800, margin: 20}}>\n                    <p style={{ textAlign: 'left' }}>\n                        {this.state.currentPrediction !== null ? (\n                            this.state.currentPrediction.split('\\n').map((paragraph, index) => (\n                            <React.Fragment key={index}>\n                                {index > 0 && <span style={{ marginLeft: '20px' }} />}\n                                {paragraph}\n                                <br />\n                            </React.Fragment>\n                            ))\n                        ) : (\n                            <span>No prediction available.</span>\n                        )}\n                    </p>\n                    </Card>\n\n                        </div>\n                    </Tabs.TabPane>\n\n                    <Tabs.TabPane tab=\"Chatbot\" key=\"chatbot\">\n                        IntelliHealth ChatBot\n                        <p style={{fontWeight: \"normal\", fontSize: \"15px\"}}>\n                            If you have any question, feel free to ask any questions about the diabetes\n                        </p>\n\n\n                        <TextArea showCount maxLength={100} onChange={this.onChangeQuestions} style={{ width: 800, height: 350 }} />\n                        <p>\n\n                        </p>\n\n                        <Button type=\"primary\" htmlType=\"submit\" onClick={this.onClickQuetions}> Send it </Button>\n\n                        <p>\n\n                        </p>\n\n                        <div>\n                            <Card title=\"ChatBot Response: \" bordered={false} style={{ width: 800, margin: 20 }}>\n                                <p >\n                                    {this.state.currentAnswer}\n                                </p>\n                            </Card>\n\n                        </div>\n                    </Tabs.TabPane>\n                </Tabs>\n            </div>\n        );\n    }\n}\nexport default Physician;*/\nvar _c;\n$RefreshReg$(_c, \"SelectionButton\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","SelectionButton","_s","isSelected","setIsSelected","handleClick","onClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kangwang/Documents/GitHub/IntelliHealth/IntelliHealthApp/IntelliHealthReact/intellihealthfrontend/src/components/Physician.js"],"sourcesContent":["\n\nimport React, { useState } from 'react';\nimport './SelectionButton.css'; // Import the CSS file\n\nconst SelectionButton = () => {\n  const [isSelected, setIsSelected] = useState(false);\n\n  const handleClick = () => {\n    setIsSelected(!isSelected);\n  };\n\n  return (\n    <button\n      onClick={handleClick}\n      className={`selection-button ${isSelected ? 'selected' : ''}`}\n    >\n      {isSelected ? 'Selected' : 'Select'}\n    </button>\n  );\n};\n\nexport default SelectionButton;\n\n\n/*\n\n\n\nconst ASK_QUETIONS_URL = 'http://127.0.0.1:5000/api/v1/chat/'\nconst QUOTE_MODEL_URL = 'http://127.0.0.1:5000/api/v1/model/prediction'\nconst { TextArea } = Input;\nlet text1 = \"sea\";\nclass Physician extends Component {\n    constructor(props) {\n        super(props);\n        // define state for the components states\n        this.state = {\n            currentQuestion: null,\n            currentQuote: null,\n            currentAnswer: \"Your answer will be displayed here\",\n            gender: 0,\n            age: 80,\n            hypertension: 0,\n            heartdisease: 1,\n            smokingHistory: 4,\n            bmi: 25.19,\n            hbA1cLevel: 6.6,\n            bloodGlucoseLevel: 140,\n            currentPrediction: \"Your prediction will be displayed here\",\n        }\n        this.formRef = React.createRef();\n    }\n\n    onClickExample1 = async () => {\n        console.log(\"clicked example 1\");\n        await this.setState({ gender: 0 });\n        this.formRef.current.setFieldsValue({\n            gender: 0,\n        });\n        await this.setState({ age: 80 });\n        this.formRef.current.setFieldsValue({\n            age: 80,\n        });\n        await this.setState({ hypertension: 0 });\n        this.formRef.current.setFieldsValue({\n            hypertension: 0,\n        });\n        await this.setState({ heartdisease: 1 });\n        this.formRef.current.setFieldsValue({\n            heartdisease: 1,\n        });\n        await this.setState({ smokingHistory: 4 });\n        this.formRef.current.setFieldsValue({\n            smokingHistory: 4,\n        });\n        await this.setState({ bmi: 25.19 });\n        this.formRef.current.setFieldsValue({\n            bmi: 25.19,\n        });\n        await this.setState({ hbA1cLevel: 6.6 });\n        this.formRef.current.setFieldsValue({\n            hbA1cLevel: 6.6,\n        });\n        await this.setState({ bloodGlucoseLevel: 140 });\n        this.formRef.current.setFieldsValue({\n            bloodGlucoseLevel: 140,\n        });\n        console.log(\"Data set to example 1\");\n        // console.log(this.state.gender);\n    }\n\n    onClickExample2 = async () => {\n        console.log(\"clicked example 2\");\n        await this.setState({ gender: 1 });\n        this.formRef.current.setFieldsValue({\n            gender: 1,\n        });\n        await this.setState({ age: 90 });\n        this.formRef.current.setFieldsValue({\n            age: 90,\n        });\n        await this.setState({ hypertension: 1 });\n        this.formRef.current.setFieldsValue({\n            hypertension: 1,\n        });\n        await this.setState({ heartdisease: 1 });\n        this.formRef.current.setFieldsValue({\n            heartdisease: 1,\n        });\n        await this.setState({ smokingHistory: 12 });\n        this.formRef.current.setFieldsValue({\n            smokingHistory: 12,\n        });\n        await this.setState({ bmi: 40 });\n        this.formRef.current.setFieldsValue({\n            bmi: 40,\n        });\n        await this.setState({ hbA1cLevel: 10 });\n        this.formRef.current.setFieldsValue({\n            hbA1cLevel: 10,\n        });\n        await this.setState({ bloodGlucoseLevel: 260 });\n        this.formRef.current.setFieldsValue({\n            bloodGlucoseLevel: 260,\n        });\n        console.log(\"Data set to example 2\");\n        // console.log(this.state.gender);\n    }\n\n    onClickMale = async () => {\n        console.log(\"clicked example 1\");\n        await this.setState({ gender: 0 });\n        this.formRef.current.setFieldsValue({\n            gender: 0,\n        });\n    }\n\n    onClickFemale = async () => {\n        console.log(\"clicked example 1\");\n        await this.setState({ gender: 0 });\n        this.formRef.current.setFieldsValue({\n            gender: 1,\n        });\n    }\n\n    onClickQuetions = async () => {\n        console.log(\"clicked ask quetions\");\n\n        // const response = await this.onAskQuestions();\n        // // console.log(response);\n        // this.setState({ currentAnswer: response });\n        // console.log(this.state.currentAnswer);\n        // // console.log(this.state.currentAnswer.created)\n\n        await this.onAskQuestions();\n        console.log(this.state.currentAnswer);\n    }\n\n    onSetAnswers = async (response) => {\n        await this.setState({ currentAnswer : response });\n        console.log(this.state.currentAnswer);\n    }\n\n    onClickModels = async () => {\n        console.log(\"clicked quote models\");\n\n        const response = await this.onQuoteModels();\n        console.log(response);\n    }\n\n    onChangeQuestions = async (e) => {\n        await this.setState({ currentQuestion : e.target.value });\n        console.log(this.state.currentQuestion);\n    }\n\n    onChangeModels = async e => {\n        await this.setState({ currentQuote : e.target.value });\n        console.log(this.state.currentQuote);\n    }\n\n    onChangeGender = async (e) => {\n        await this.setState({ gender : e });\n        console.log(this.state.gender);\n    }\n\n    onChangeAge = async e => {\n        await this.setState({ age : e});\n        console.log(this.state.age);\n    }\n\n    onChangeHypertension = async e => {\n        await this.setState({ hypertension : e });\n        console.log(this.state.hypertension);\n    }\n\n    onChangeHeartdisease = async e => {\n        await this.setState({ heartdisease : e });\n        console.log(this.state.heartdisease);\n    }\n\n    onChangeSmokingHistory = async e => {\n        await this.setState({ smokingHistory : e });\n        console.log(this.state.smokingHistory);\n    }\n\n    onChangeBmi = async e => {\n        await this.setState({ bmi : e });\n        console.log(this.state.bmi);\n    }\n\n    onChangeHbA1cLevel = async e => {\n        await this.setState({ hbA1cLevel : e });\n        console.log(this.state.hbA1cLevel);\n    }\n\n    onChangeBloodGlucoseLevel = async e => {\n        await this.setState({ BloodGlucoseLevel : e });\n        console.log(this.state.BloodGlucoseLevel);\n    }\n\n    // onAskQuestions = async () => {\n    //     return fetch(`${ASK_QUETIONS_URL}${this.state.currentQuestion}`, {\n    //         method: 'GET',\n    //         headers: {\n    //         'Content-Type': 'application/json',\n    //         },\n    //     }).then((response) => {\n    //         if (response.status !== 200) {\n    //             throw Error('Fail to request the answer from the server');\n    //         }\n\n    //         return response.json(); // Return the promise directly\n    //     }).then((result) => {\n    //         console.log(result);\n    //         this.setState({ currentAnswer: result }); // Set the result when the promise resolves\n    //         // console.log(this.state.currentAnswer);\n    //         return result; // Return the result value\n    //     });\n    // }\n\n    onAskQuestions = () => {\n        axios.get(`${ASK_QUETIONS_URL}${this.state.currentQuestion}`, {\n            headers: {\n            'Content-Type': 'application/json',\n            },\n        }).then((response) => {\n            if (response.status !== 200) {\n                throw Error('Fail to request the answer from the server');\n            }\n\n            \n            console.log(response);\n            this.setState({ currentAnswer: response.data.text}); // Set the result when the promise resolves\n            // console.log(this.state.currentAnswer);\n            return response; // Return the result value\n        });\n    }\n\n    onClickPrediction = () => {\n        var data = [[this.state.gender, this.state.age, this.state.hypertension, this.state.heartdisease, this.state.smokingHistory, this.state.bmi, this.state.hbA1cLevel, this.state.bloodGlucoseLevel]]\n        var matrix = { 'data': data }\n        console.log(matrix);\n        console.log(JSON.stringify(matrix));\n        axios.post(`${QUOTE_MODEL_URL}`, {\n            headers: {\n            'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(matrix)\n        }).then((response) => {\n            if (response.status !== 200) {\n                throw Error('Fail to request the answer from the server');\n            }\n\n            \n            // console.log(response);\n            this.setState({ currentPrediction: response.data.prediction}); // Set the result when the promise resolves\n            console.log(this.state.currentPrediction+text1);\n            return response; // Return the result value\n        });\n    }\n\n    onQuoteModels = async (data) => {\n        return fetch(`${QUOTE_MODEL_URL}`, {\n            method: 'post',\n            headers: {\n            'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(data)\n        }).then((response) => {\n            if (response.status !== 200) {\n                throw Error('Fail to request the prediction from the server');\n            }\n\n            return response.json();\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"Main\" style={{fontWeight: \"bold\"}}>\n                <Tabs defaultActiveKey = \"prediction\">\n                    <Tabs.TabPane tab=\"Prediction\" key=\"prediction\">\n                        IntelliHealth Prediction\n                        <p style={{fontWeight: \"normal\", fontSize: \"15px\"}}>\n                            Please input the following information to get a prediction of your risk of getting diabetes.\n                        </p>\n\n                        <Form ref={this.formRef}>\n                            <Form.Item label=\"Gender\" name=\"gender\" initialValue={0} rules={[{ required: true, message: 'Please input valid numbers'}]}>\n                                <InputNumber min={0} max={1} onChange={this.onChangeGender} precision={0}/>\n                            </Form.Item>\n                            <Form.Item label = \"Gender\" name=\"gender\" rules={[{ required: true}]}>\n                            <Button  type=\"primary\" htmlType=\"submit\" onClick={this.onClickMale} style={{ margin: 20 }}> Male </Button>\n                            <Button  type=\"primary\" htmlType=\"submit\" onClick={this.onClickFemale} style={{ margin: 20 }}> Female </Button>\n                            </Form.Item>\n                            <Form.Item label=\"Age\" name=\"age\" initialValue={80} rules={[{ required: true, message: 'Please input valid numbers'}]}>\n                                <InputNumber min={0} max={100} onChange={this.onChangeAge} precision={0}/>\n                            </Form.Item>\n                            <Form.Item label=\"Hypertension\" name=\"hypertension\" initialValue={0} rules={[{ required: true, message: 'Please input valid numbers'}]}>\n                                <InputNumber min={0} max={1} onChange={this.onChangeHypertension} precision={0}/>\n                            </Form.Item>\n                            <Form.Item label=\"Heart Disease\" name=\"heartdisease\" initialValue={1} rules={[{ required: true, message: 'Please input valid numbers'}]}>\n                                <InputNumber min={0} max={1} onChange={this.onChangeHeartdisease} precision={0}/>\n                            </Form.Item>\n                            <Form.Item label=\"Smoking History\" name=\"smokingHistory\" initialValue={4} rules={[{ required: true, message: 'Please input valid numbers'}]}>\n                                <InputNumber min={0} max={100} onChange={this.onChangeSmokingHistory} precision={2}/>\n                            </Form.Item>\n                            <Form.Item label=\"BMI\" name=\"bmi\" initialValue={25.19} rules={[{ required: true, message: 'Please input valid numbers'}]}>\n                                <InputNumber min={0} max={100} onChange={this.onChangeBmi} precision={2}/>\n                            </Form.Item>\n                            <Form.Item label=\"HbA1c Level\" name=\"hbA1cLevel\" initialValue={6.6} rules={[{ required: true, message: 'Please input valid numbers'}]}>\n                                <InputNumber min={0} max={100} onChange={this.onChangeHbA1cLevel} precision={2}/>\n                            </Form.Item>\n                            <Form.Item label=\"Blood Glucose Level\" name=\"bloodGlucoseLevel\" initialValue={140} rules={[{ required: true, message: 'Please input valid numbers'}]}>\n                                <InputNumber min={0} max={600} onChange={this.onChangeBloodGlucoseLevel} precision={2}/>\n                            </Form.Item>\n\n                        </Form>\n\n                        <Button  type=\"primary\" htmlType=\"submit\" onClick={this.onClickExample1} style={{ margin: 20 }}> Example 1 </Button>\n\n                        <Button  type=\"primary\" htmlType=\"submit\" onClick={this.onClickExample2} style={{  margin: 20 }}> Example 2 </Button>\n\n                        <p></p>\n\n                        <Button  type=\"primary\" htmlType=\"submit\" onClick={this.onClickPrediction}> Get Prediction </Button>\n\n\n\n                <div>\n                    <Card title=\"Prediction: \" bordered={false} style={{ width: 800, margin: 20}}>\n                    <p style={{ textAlign: 'left' }}>\n                        {this.state.currentPrediction !== null ? (\n                            this.state.currentPrediction.split('\\n').map((paragraph, index) => (\n                            <React.Fragment key={index}>\n                                {index > 0 && <span style={{ marginLeft: '20px' }} />}\n                                {paragraph}\n                                <br />\n                            </React.Fragment>\n                            ))\n                        ) : (\n                            <span>No prediction available.</span>\n                        )}\n                    </p>\n                    </Card>\n\n                        </div>\n                    </Tabs.TabPane>\n\n                    <Tabs.TabPane tab=\"Chatbot\" key=\"chatbot\">\n                        IntelliHealth ChatBot\n                        <p style={{fontWeight: \"normal\", fontSize: \"15px\"}}>\n                            If you have any question, feel free to ask any questions about the diabetes\n                        </p>\n\n\n                        <TextArea showCount maxLength={100} onChange={this.onChangeQuestions} style={{ width: 800, height: 350 }} />\n                        <p>\n\n                        </p>\n\n                        <Button type=\"primary\" htmlType=\"submit\" onClick={this.onClickQuetions}> Send it </Button>\n\n                        <p>\n\n                        </p>\n\n                        <div>\n                            <Card title=\"ChatBot Response: \" bordered={false} style={{ width: 800, margin: 20 }}>\n                                <p >\n                                    {this.state.currentAnswer}\n                                </p>\n                            </Card>\n\n                        </div>\n                    </Tabs.TabPane>\n                </Tabs>\n            </div>\n        );\n    }\n}\nexport default Physician;*/"],"mappings":";;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,uBAAuB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EAEnD,MAAMO,WAAW,GAAGA,CAAA,KAAM;IACxBD,aAAa,CAAC,CAACD,UAAU,CAAC;EAC5B,CAAC;EAED,oBACEH,OAAA;IACEM,OAAO,EAAED,WAAY;IACrBE,SAAS,EAAG,oBAAmBJ,UAAU,GAAG,UAAU,GAAG,EAAG,EAAE;IAAAK,QAAA,EAE7DL,UAAU,GAAG,UAAU,GAAG;EAAQ;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7B,CAAC;AAEb,CAAC;AAACV,EAAA,CAfID,eAAe;AAAAY,EAAA,GAAfZ,eAAe;AAiBrB,eAAeA,eAAezXA,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}